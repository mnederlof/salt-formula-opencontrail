{%- from "opencontrail/map.jinja" import collector with context %}
{%- from "opencontrail/map.jinja" import web with context %}
#
# Copyright (c) 2014 Juniper Networks, Inc. All rights reserved.
#
# Control-node configuration options
#

[DEFAULT]
# Everything in this section is optional

# Time-to-live in hours of the various data stored by collector into
# cassandra
# analytics_config_audit_ttl, if not set (or set to -1), defaults to analytics_data_ttl
# analytics_statistics_ttl, if not set (or set to -1), defaults to analytics_data_ttl
# analytics_flow_ttl, if not set (or set to -1), defaults to analytics_statsdata_ttl
analytics_data_ttl={{ collector.data_ttl }}
analytics_config_audit_ttl={{ collector.data_ttl }}
analytics_statistics_ttl={{ collector.data_ttl }}
analytics_flow_ttl={{ collector.data_ttl }}

cassandra_server_list={% for member in collector.database.members %}{{ member.host }}:9042 {% endfor %}

# IP address and port to be used to connect to kafka.
# Multiple IP:port strings separated by space can be provided
kafka_broker_list={% for member in collector.database.members %}{{ member.host }}:9092 {% endfor %}
partitions=30

# IP address and port to be used to connect to zookeeper.
# Multiple IP:port are specified as single string separated by comma
zookeeper_server_list={% for member in collector.database.members %}{{ member.host }}:2182{% if not loop.last %},{% endif %}{% endfor %}

# Disable flow collection
disable_flow_collection={{ collector.get('disable_flow_collection', 'false')|lower }}

# dup=0
hostip={{ collector.bind.address }} # Resolved IP of `hostname`
# hostname= # Retrieved as `hostname`
http_server_port=8089
# log_category=
# log_disable=0
log_file=/var/log/contrail/contrail-collector.log
# log_files_count=10
# log_file_size=1048576 # 1MB
log_level=SYS_NOTICE
log_local=1

# TCP and UDP ports to listen on for receiving syslog messages. -1 to disable.
syslog_port=-1

# UDP port to listen on for receiving sFlow messages. -1 to disable.
# sflow_port=6343

# UDP port to listen on for receiving ipfix messages. -1 to disable.
# ipfix_port=4739

# test_mode=0

# Sandesh send rate limit can be used to throttle system logs transmitted per
# second. System logs are dropped if the sending rate is exceeded
# sandesh_send_rate_limit=

[COLLECTOR]
port=8086
# server= 0.0.0.0

# UDP port to listen on for receiving Google Protocol Buffer messages
# protobuf_port=3333

[STRUCTURED_SYSLOG_COLLECTOR]
# TCP & UDP port to listen on for receiving structured syslog messages
# port=3514

# List of external syslog receivers to forward structured syslog messages in ip:port format separated by space
# tcp_forward_destination=10.213.17.53:514

# kafka broker list to forward structured syslogs
kafka_broker_list={% for member in collector.database.members %}{{ member.host }}:9092 {% endfor %}

# kafka topic to forward structured syslogs
# kafka_topic=structured_syslog_topic

# number of kafka partitions
# kafka_partitions=30

[API_SERVER]
# List of api-servers in ip:port format separated by space
api_server_list={% for member in collector.config.members %}{{ member.host }}:9100 {% endfor %}
# api_server_use_ssl=False

[DATABASE]
# disk usage percentage
#disk_usage_percentage.high_watermark0=90
#disk_usage_percentage.low_watermark0=85
#disk_usage_percentage.high_watermark1=80
#disk_usage_percentage.low_watermark1=75
#disk_usage_percentage.high_watermark2=70
#disk_usage_percentage.low_watermark2=60

# Cassandra pending compaction tasks
#pending_compaction_tasks.high_watermark0=400
#pending_compaction_tasks.low_watermark0=300
#pending_compaction_tasks.high_watermark1=200
#pending_compaction_tasks.low_watermark1=150
#pending_compaction_tasks.high_watermark2=100
#pending_compaction_tasks.low_watermark2=80

# Message severity levels to be written to database
#high_watermark0.message_severity_level=SYS_EMERG
#low_watermark0.message_severity_level=SYS_ALERT
#high_watermark1.message_severity_level=SYS_ERR
#low_watermark1.message_severity_level=SYS_WARN
#high_watermark2.message_severity_level=SYS_DEBUG
#low_watermark2.message_severity_level=INVALID

[REDIS]
port=6379
server=127.0.0.1
password={{ web.get('cache', {}).get('password', 'guest') }}
